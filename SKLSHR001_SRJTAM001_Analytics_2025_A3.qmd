---
title: "Analytics_assignment3"
format: pdf
editor: visual
---

```{r, warning=FALSE, message=FALSE}
#| include: false
library(cluster)
library(NbClust)
library(fpc)
library(knitr)
library(GGally)
library(parallel)
library(corrplot)
```

# Question 1 : EDA

a\)

```{r, warning=FALSE, message=FALSE}
#| include: false

df <- read.table("STA4026_Assignment_Clustering.txt",
                 header = FALSE)
#dimension of dataset
dim <- dim(df)
kable(dim, col.names = "Dimensions", caption = "The dimensions of the data set")
#data types
kable(str(df), caption= "The structure of the data set")
#missing values
kable(colSums(is.na(df)), caption ="The number of missing values in each column")
#quartiles of dataset
kable(summary(df), caption="A summary of the data statistics")
# IQRs
iqr.v1 <- IQR(df$V1)
iqr.v2 <- IQR(df$V2)
```

In order to gather descriptive statistics for the data, prior checks were conducted: no missing values were found in the dataset and all data entries were of "integer" type. Thus, no data cleaning was necessary. The results from our descriptive analysis is outlined below.

```{r}
#|label: tbl-dscrp
#| echo: false
kable(summary(df), caption="Tabular summary of the descriptive statistics of the data")     
```

The dataset contains 5000 observations of 2 numeric variables, both containing all integer values.

Variable 1 (V1) values ranges from 89606 to 932954. The median is slightly above the mean, which hints at a mild left-skew (a few low values pulling the mean down). Variable 2 (V2) values have a much wider range, from 9597 to 977215. The mean is slightly above the median, suggesting a slight right-skew (a few high values pulling the mean up).

However, in both cases, the medians are relatively near their respective means, and are roughly centered between the 1st and 3rd quartiles for each variable. This indicates that the core of the distributions are roughly symmetric.

b\)

Euclidean distance is used as the primary distance metric. This is due to several reasons. Both variables are continuous and numeric. Additionally, despite V2 having a much wider range than V1, the variables are on fairly comparable scales after standardization and will consequently contribute equally to the distance metric. Furthermore, the data is roughly symmetric. This implies balanced variation around the mean, such that the mean is a good central point. Euclidean distance is centered around the mean — so it behaves well under symmetry.

c\)

```{r, warning=FALSE, message=FALSE}
#| echo: false
#| caption: "Pairwise scatterplot"
df_scaled <- scale(df)
ggpairs(as.data.frame(df_scaled))

```

We’ve already standardized the data set as a result of choosing the euclidean distance as our metric in the previous question, so it is just a linear rescaling of the axes and won't really change the shape of the graphs/plots.

The marginal density for V1 is clearly multi-modal, with at least two distinct “humps” separated by shallow troughs. One peak below zero and a larger one around +0.5 to +1.0 which suggests there are two or even three natural subgroups in V1. In contrast, V2’s density is largely uni-modal but can be said to be right‐skewed, with most observations clustered near the center and a long tail stretching out past +2. When you plot these together, the scatterplot forms a roughly elliptical, symmetric cloud centered at (0,0) with no clear diagonal stretch and as expected the correlation is nearly zero, so points group in vertically aligned bands corresponding to V1’s modes which is not clearly shown in the plot. V1’s multiple peaks point to splitting clusters along that axis, while V2 adds spread but not distinct clusters, which justifies using a Euclidean distance on the standardized data and expecting roughly spherical clusters.

d\)

```{r, warning=FALSE, message= FALSE}
#| echo: false
dist_matrix <- dist(df_scaled, method="euclidean")
d_vals <- as.vector(dist_matrix)
hist(d_vals, breaks=50, main="Pairwise distances", xlab="Distance")

```

The distance histogram clearly shows a single, broad peak centered around 1–2.2. This suggests the typical distance between any two observations once both variables are on the same scale. It suggests that if you pick two random data points, they’re most likely to be about two standard deviations apart overall. The bars taper off into a long right‐hand tail reaching out to about 5, which indicates a handful of point-pairs that are far apart (either true outliers or members of very distinct subgroups). At the extreme left, the histogram shape indicates that there are a few nearly zero distances corresponding to observations that are virtually identical on V1 and V2, meaning they would always merge immediately in a hierarchical tree or sit in the same k‐means cluster. Altogether, this moderate spread, neither all bunched up or wildly dispersed, suggests clustering algorithms will have enough contrast to pull apart dense regions.

e\)

We will compute the average distance for each observation i to all other points in the distance matrix:

```{r}
#####USING AVG DIST AND 2 STAND DEV TO GET OUTLIERS
avg_d   <- rowMeans(as.matrix(dist_matrix))
mu      <- mean(avg_d)
sigma   <- sd(avg_d)
outliers <- which(avg_d > mu + 2*sigma)       # those beyond 2 SD above the mean
outliers_top10 <- head(order(avg_d, decreasing=TRUE), 10)

#####USING BOXPLOTS HERE, NOT SURE WHICH WAY TO DO IT
# Compute each point’s average distance
d_mat     <- as.matrix(dist(df_scaled))
avg_d     <- rowMeans(d_mat)

# Boxplot the average distances
boxplot(avg_d, main="Avg. Distance to Other Points",
        ylab="Avg Euclidean Distance")

#Identify those beyond the upper whisker (= Q3 + 1.5*IQR)
stats     <- boxplot.stats(avg_d)$stats    # [1]=min [2]=Q1 [3]=med [4]=Q3 [5]=max
upper_cut <- stats[4] + 1.5*(stats[4] - stats[2])
outliers  <- which(avg_d > upper_cut)
length(outliers)  # how many we found

#If more than 10, take the top 10 by avg_d
outliers_top10 <- head(order(avg_d[outliers], decreasing=TRUE), 10)
outliers[outliers_top10]

```

The 10 observations with the largest average distance are our outliers. These points are much further from the bulk of the data. Each of these observations are on average, more than 2 standard deviations farther away from all other observations than a "normal" observation. This could influence the clustering algorithms because the k-means centroids will be pulled towards any of these extreme values and hierarchical merges will bind them at very high heights.

f\)

```{r}
#Compute the correlation matrix on the standardized data
cor_mat <- cor(df_scaled)
kable(cor_mat, caption="The correlation matrix on the standardized data")

#Visualise
corrplot(
  cor_mat,
  method     = "circle",        # or "shade"/"pie" etc for the shapes
  addCoef.col= "black",         # draw the correlation numbers in black
  number.cex = 0.8,             # shrink the text size if needed
  tl.cex     = 1.0,             # text size for variable names
  title      = "Correlation Matrix with Coefficients",
  mar        = c(0,0,1,0)       # make room for the title
)

```

The diagonals are 1 because each variable is perfectly correlated with itself. The off-diagonals represent the association between the 2 variables. As we can see, the correlation between variable 1 and 2 is 0.07. The low correlation suggests that each variable has their own, independent information which influences the data set and suggests no redundancy. These variables won't dominate each other when clustering. Due to the variables being slightly uncorrelated, there would be no need to drop one or decorrelate them as the euclidean distance on the standardized data will treat the variables fairly.

g\)

Yes, we would standardize the data before computing any euclidean distances which is the distance metric we picked in the beginning. We would do this because the raw scales of the variables span hundreds of thousands, so this will drastically influence our clustering algorithms. The euclidean distance is calculated as the square root of the sum of the squares of the differences between corresponding coordinates. Without standardization, whichever variable has the largest absolute spread will dominate and lead to skewed results. By standardizing, each variable has equal contribution. Since both variables showed similar IQRs and no extreme skew in their middle ranges, standardizing simply aligns their scales without distorting the multi modal pattern in V1 or the slight skew in V2, ensuring our clustering sees genuine structure, not scale artifacts.

# Question 2

a\)

```{r, cache=TRUE}
#Compute average silhouette for k-means
sil_km <- sapply(2:20, function(K) {
  km  <- kmeans(df_scaled, centers = K, nstart = 50, iter.max = 100)
  sil <- silhouette(km$cluster, dist_matrix)
  mean(sil[, "sil_width"])
})

#Compute average silhouette for k-medoids (PAM)
sil_pam <- sapply(2:20, function(K) {
  pamc <- pam(dist_matrix, k = K, diss = TRUE)
  mean(pamc$silinfo$widths[, "sil_width"])
})

#Plot them side by side
par(mfrow = c(1,2))
plot(2:20, sil_km, type = "b",
     xlab = "K", ylab = "Avg. silhouette (k-means)",
     main = "k-means silhouette")
plot(2:20, sil_pam, type = "b",
     xlab = "K", ylab = "Avg. silhouette (k-medoids)",
     main = "k-medoids silhouette")
par(mfrow = c(1,1))
```

Both the k-means and k-medoids silhouette curves exhibit two natural “peaks” in the range K=2–20. First, there is a clear local maximum at k=3 (average silhouette ≈ 0.40 for both methods), indicating that three clusters capture the most prominent division in the data, splitting into two clusters loses cohesion, while four or five clusters start to over fragment the main groups. Beyond k=8, the silhouette steadily rises again, peaking around k=15–16 (≈ 0.47 for k-means, ≈ 0.48 for k-medoids), which suggests a much finer partition yields the tightest, most well-separated clusters, but that many clusters may be over‐splitting. Therefore, based on average silhouette alone, two sensible choices emerge for both algorithms: a coarse segmentation at k=3 and a fine-grained segmentation at k=15 (or 16), depending on whether we want to prioritize broader overview or maximum cluster compactness.

b\)

```{r}
#Sensitivity for k-means at K = 3
set.seed(123)
K <- 3
n_runs <- 100

#k-means n_runs times with random init (nstart=1 each time)
wss_km <- replicate(n_runs, {
  km <- kmeans(df_scaled, centers = K, nstart = 1, iter.max = 100)
  km$tot.withinss
})

hist(wss_km, breaks = 20,
     main = "Histogram of total WSS over 100 k-means inits",
     xlab = "Total within-cluster SS")
#a density estimate
plot(density(wss_km),
     main = "Density of WSS over 100 k-means inits",
     xlab = "Total within-cluster SS")
abline(v = mean(wss_km), col = "blue", lwd = 2)
abline(v = median(wss_km), col = "red", lwd = 2)
legend("topright",
       legend = c("Mean", "Median"),
       col    = c("blue", "red"),
       lwd    = 2)

#Best two initializations
best_km <- order(wss_km)[1:2]
wss_km[best_km]


#Sensitivity for k-medoids (PAM) at K = 3
#to introduce randomness we use CLARA,which runs PAM on random subsamples:

set.seed(123)
sil_clara <- replicate(n_runs, {
  clara_res <- cluster::clara(df_scaled, k = K, samps = 5, pamLike = TRUE)
  mean(cluster::silhouette(clara_res$clustering, dist_matrix)[, "sil_width"])
})

#boxplot of avg. silhouette
boxplot(sil_clara,
        main = paste("CLARA (k-medoids) avg. silhouette over", n_runs, "samps (K=",K,")"),
        ylab = "Avg. silhouette")

# Histogram of silhouette values
hist(sil_clara, breaks = 20,
     main = "Histogram of avg. silhouette over 100 CLARA runs",
     xlab = "Avg. silhouette",
     ylab = "Frequency")

# Density plot
plot(density(sil_clara),
     main = "Density of avg. silhouette (CLARA)",
     xlab = "Avg. silhouette")
abline(v = mean(sil_clara), col = "blue", lwd = 2)
abline(v = median(sil_clara), col = "red",  lwd = 2)
legend("topright",
       legend = c("Mean", "Median"),
       col    = c("blue", "red"),
       lwd    = 2)

#Best two CLARA runs by silhouette
best_clara <- order(sil_clara, decreasing = TRUE)[1:2]
best_clara

```

For k=3, we ran k-means 100 times and plotted the histogram (and density) of the total within-cluster sum of squares (WSS) over those runs. As seen in the histogram, the WSS took largely to only 3 ranges of values. A small left‐hand bar at 3810, a tall middle bar around 3820 , and a short right‐hand bar \>4000.

Because most of the runs (more than half) fall in the two left bars , especially the tall middle one which is just slightly above the absolute minimum, the algorithm is extremely stable. This means that almost any random start lands in the optimal or near-optimal bin. The two optimal configurations are the runs that achieved the absolute minimum WSS of 3801.603.

EXPLAIN CLARA

c\)

```{r}
# Number of random inits
n_runs <- 500    
K      <- 3

# Prepare cluster
ncores <- detectCores() - 1
cl     <- makeCluster(ncores)

# Export data and packages to each worker
clusterExport(cl, c("df_scaled", "K"))
clusterEvalQ(cl, { library(cluster) })

#Parallel k-means WSS over n_runs
wss_vals <- parSapply(cl, 1:n_runs, function(i) {
  # one single-start kmeans
  km <- kmeans(df_scaled, centers = K, nstart = 1, iter.max = 100)
  km$tot.withinss
})

#Parallel CLARA silhouette over n_runs
sil_vals <- parSapply(cl, 1:n_runs, function(i) {
  clara_res <- clara(df_scaled, k = K, samps = 5, pamLike = TRUE)
  mean(silhouette(clara_res$clustering,
                  dist(df_scaled, method = "euclidean"))[, "sil_width"])
})

stopCluster(cl) 

# Quick summaries
summary(wss_vals)
sd(wss_vals)

summary(sil_vals)
sd(sil_vals)
```

d\)

```{r}
#Gap statistic for k-means on the scaled data
set.seed(123)
gap_km <- clusGap(
  df_scaled,
  FUN       = kmeans,
  K.max     = 10,    # test K = 1..10
  B         = 50,    # 50 bootstrap samples
  verbose   = FALSE
)

#Plot the Gap statistic
plot(
  gap_km,
  main = "Gap Statistic vs. K (k-means)",
  xlab = "Number of clusters K",
  ylab = "Gap statistic"
)

#Extract suggested K
print(gap_km, method = "firstmax")
```
