---
title: "Analytics_assignment3"
format: pdf
editor: visual
---

```{r, warning=FALSE, message=FALSE}
#| include: false
library(cluster)
library(NbClust)
library(fpc)
library(knitr)
library(GGally)
library(parallel)
library(corrplot)
```

# Question 1 : EDA

a\)

```{r, warning=FALSE, message=FALSE}
#| include: false

df <- read.table("STA4026_Assignment_Clustering.txt",
                 header = FALSE)
#dimension of dataset
dim <- dim(df)
kable(dim, col.names = "Dimensions", caption = "The dimensions of the data set")
#data types
kable(str(df), caption= "The structure of the data set")
#missing values
kable(colSums(is.na(df)), caption ="The number of missing values in each column")
#quartiles of dataset
kable(summary(df), caption="A summary of the data statistics")
# IQRs
iqr.v1 <- IQR(df$V1)
iqr.v2 <- IQR(df$V2)
```

In order to gather descriptive statistics for the data, prior checks were conducted: no missing values were found in the dataset and all data entries were of "integer" type. Thus, no data cleaning was necessary. The results from our descriptive analysis is outlined below.

```{r}
#|label: tbl-dscrp
#| echo: false
kable(summary(df), caption="Tabular summary of the descriptive statistics of the data")   

```

The dataset contains 5000 observations of 2 numeric variables, both containing all integer values.

Variable 1 (V1) values ranges from 89606 to 932954. The median is slightly above the mean, which hints at a mild left-skew (a few low values pulling the mean down). Variable 2 (V2) values have a much wider range, from 9597 to 977215. The mean is slightly above the median, suggesting a slight right-skew (a few high values pulling the mean up).

Even though their IQRs are similar, the variables have quite different ranges and means, implying a need for standardization.

However, in both cases, the medians are relatively near their respective means, and are roughly centered between the 1st and 3rd quartiles for each variable. This indicates that the core of the distributions are roughly symmetric.

b\)

Euclidean distance is used as the primary distance metric. This is due to several reasons.

The data is low dimensional, with both variables being continuous and numeric, implying suitability for the Euclidean measure.

Additionally, despite V2 having a much wider range than V1, the variables are on fairly comparable scales after standardization and will consequently contribute equally to the distance metric.

Furthermore, the data is roughly symmetric. This implies balanced variation around the mean, such that the mean is a good central point. Euclidean distance is centered around the mean — so it behaves well under symmetry.

As we'll see later, these variables are practically uncorrelated, which further motivates this choice of distance metric.

c\)

To explore potential relationships and structure in the data, a pairs plot was constructed using the two standardised variables, V1 and V2.

```{r, warning=FALSE, message=FALSE}
#| echo: false
#| label: fig-pairs
#| caption: "Pair plot showing univariate and bivariate distributions for V1 and V2"
df_scaled <- scale(df)
ggpairs(as.data.frame(df_scaled))

```

The univariate distribution for V1 is clearly multi-modal, with at least 3 distinct high-density peaks roughly situated near quartile 1, the median and quartile 2, separated by shallow troughs. This suggests that there are three natural subgroups in V1, which can thus form 3 clusters.

In contrast, V2’s univariate density is right‐skewed, with most observations clustered near the center and a long tail stretching out to the right towards the maximum. It is largely bimodal with at least 2 distinct high-density peaks situated roughly around quartile 1 and quartile 3, and separated by a discerningly low trough. Thus, at least two clusters can be formed in this regard.

The pairwise scatterplot forms a roughly elliptical, symmetric cloud centered at (0,0) with no clear diagonal stretch. As expected the correlation between V1 and V2 is nearly zero, indicating that there is an extremely weak positive linear relationship between the variables- essentially no linear relationship and thus both variables contribute independently to the clustering structure. Because there is visually no distinct groups in this plot, this indicates that the clustering structure is not aligned along a single axis. This means the data doesn’t show a clear vertical or horizontal separation and so might be split diagonally or in more complex patterns. This suggests clustering requires looking at combinations of both variables, not just one.

The shape of a distribution has a direct impact on how meaningful the mean is as a measure of central tendency. In a symmetric distribution, the mean and median are typically very close, and the mean lies at the center of the data. This makes it a reliable summary of where the bulk of the values lie.

However, in skewed distributions, the mean can be misleading. In a right-skewed distribution (with a long tail to the right), the mean is pulled upward by large values, and ends up being greater than the median. This inflates the apparent "center" of the data. In contrast, a left-skewed distribution pulls the mean downward, below the median, due to small or extreme low values. In both cases, the mean no longer accurately reflects the central bulk of the data.

If the distribution is multimodal—having more than one peak—the mean may fall between the modes, in a region where there are actually very few observations. This is particularly problematic in clustering, as it may cause the mean to represent no actual group well.

d\)

Below is a histogram of the distance matrix representing the distribution of all pairwise Euclidean distances between observations, using standardised values.

```{r, warning=FALSE, message=FALSE}
#| echo: false
dist_matrix <- dist(df_scaled, method="euclidean") # returns upper triangular matrix
d_vals <- as.vector(dist_matrix)
hist(d_vals, breaks=50, main="Pairwise distances between V1 and V2", xlab="Distance")

```

The histogram is right-skewed, with most distances concentrated in the lower-middle range and a gradual tapering toward higher distances. There is. a single, broad peak centered around the distances 1–2.2. This suggests the typical distance between any two observations once both variables are on the same scale. It implies that if you pick two random data points, they’re most likely to be about 2 standard deviations apart overall. This indicates that many observations are relatively close to one another in the standardised feature space, while a smaller number are much farther apart.

This combination — a concentration of small distances and a tail of fewer large distances — implies that there may be tight clusters of points (small internal distances), and these clusters may be well separated from each other (large distances between clusters). That’s exactly what clustering algorithms aim to find: groups of observations that are more similar (closer) to each other than to observations in other groups.

At the extreme left, the histogram shape indicates that there are a few nearly-zero distances, corresponding to observations that are virtually identical on V1 and V2. This implies that they would merge immediately in a hierarchical tree or sit in the same k‐means cluster.

e\)

```{r}
#| label: tbl-outlier

centroid <- colMeans(df_scaled)
euclidean_dist <- apply(df_scaled, 1, function(row) sqrt(sum((row - centroid)^2))) # scaled multivariate euclidean distance of each obs from mean of respective variable

# Select top k multivariate outliers
k <- 10
top_k_indices <- order(euclidean_dist, decreasing = TRUE)[1:k]
euclidean_outliers <- df[top_k_indices, ]  # Original data points

iqr_flags <- sapply(df, function(x) {
  Q1 <- quantile(x, 0.25)
  Q3 <- quantile(x, 0.75)
  IQR_val <- Q3 - Q1
  lower <- Q1 - 1.5 * iqr.v1
  upper <- Q3 + 1.5 * iqr.v2
  x < lower | x > upper
})

# Combine per-variable IQR flags (TRUE if outlier in any variable)
univariate_outliers_indices <- which(apply(iqr_flags, 1, any))
iqr_outliers <- df[univariate_outliers_indices, ]


outlier_table <- data.frame(
  Observation = top_k_indices,
  Distance = round(euclidean_dist[top_k_indices], 2),
  V1 = euclidean_outliers[, "V1"],
  V2 = euclidean_outliers[, "V2"]
)

# Reset row names to 1:k for display
rownames(outlier_table) <- 1:k

# Print formatted table with kable
kable(outlier_table, row.names = TRUE, caption="Top 10 outliers, with their observation number, euclidean distance from centroid, and variable values")

```

Outliers were identified to ensure that extreme values do not distort the clustering process. Since k-means is highly sensitive to extreme points as it uses the mean as the cluster center, and even k-medoids can be affected, it is important to detect outliers early.

Since we have a 2 dimensional dataset, we used a multivariate approach to detecting outliers: we calculated the standardised Euclidean distance between the observations and the centroid, and then selected those with the 10 largest distances. This approach takes both variables together into account and identifies points that are jointly far from the center.

The only shortfall of this method would be that it does not flag observations that are very extreme in just one variable. CODE TO CHECK...However, the pairwise scatter plot in @fig-pairs indicates that no observation has this quality, and so our method is well-justified. Thus, we have accounted for both marginal and joint outliers.

f\)

```{r}
#Compute the correlation matrix on the standardised data
cor_mat <- cor(df_scaled)
kable(cor_mat, caption="The correlation matrix on the standardised data")

#Visualise
corrplot(
  cor_mat,
  method     = "circle",        # or "shade"/"pie" etc for the shapes
  addCoef.col= "black",         # draw the correlation numbers in black
  number.cex = 0.8,             # shrink the text size if needed
  tl.cex     = 1.0,             # text size for variable names
  title      = "Correlation Matrix with Coefficients",
  mar        = c(0,0,1,0)       # make room for the title
)

```

The diagonals are 1 because each variable is perfectly correlated with itself. The off-diagonals represent the association between the 2 variables. As we can see, the correlation between variable 1 and 2 is 0.07. The low correlation suggests that each variable has their own, independent information which influences the data set and suggests no redundancy. These variables won't dominate each other when clustering. Due to the variables being slightly uncorrelated, there would be no need to drop one or decorrelate them as the euclidean distance on the standardised data will treat the variables fairly.

g\)

The need for standardisation in the data is apparent. Firstly, as seen in the data description section of the report, both variables have wide ranges. Furthermore, both have fairly large standard deviations (V1: `r round(sd(df$V1), 2)`, V2: `r round(sd(df$V2), 2)`). However, V2 exhibits a wider spread than V1, which will cause it to disproportionately influence any distance measure. Thus, in our Euclidean distance calculation, V2 will dominate the distance, somewhat masking the contribution of V1.

Since the variables are nearly uncorrelated as seen in @fig-pairs, their individual contributions to distance should be preserved. Failing to standardise would violate this by overweighting V2's contribution simply due to scale. By transforming both variables to have mean = 0 and standard deviation = 1, standardisation removes units and scale differences. This ensures that each variable contributes equally and appropriately to the total distance between observations, preserving the integrity of the multivariate structure in the dataset.

# Question 2

a\)

```{r, cache=TRUE}
#Compute average silhouette for k-means
sil_km <- sapply(2:20, function(K) {
  km  <- kmeans(df_scaled, centers = K, nstart = 50, iter.max = 100)
  sil <- silhouette(km$cluster, dist_matrix)
  mean(sil[, "sil_width"])
})

#Compute average silhouette for k-medoids (PAM)
sil_pam <- sapply(2:20, function(K) {
  pamc <- pam(dist_matrix, k = K, diss = TRUE)
  mean(pamc$silinfo$widths[, "sil_width"])
})

#Plot them side by side
par(mfrow = c(1,2))
plot(2:20, sil_km, type = "b",
     xlab = "K", ylab = "Avg. silhouette (k-means)",
     main = "k-means silhouette")
plot(2:20, sil_pam, type = "b",
     xlab = "K", ylab = "Avg. silhouette (k-medoids)",
     main = "k-medoids silhouette")
par(mfrow = c(1,1))
```

Both the k-means and k-medoids silhouette curves exhibit two natural “peaks” in the range K=2–20. First, there is a clear local maximum at k=3 (average silhouette ≈ 0.40 for both methods), indicating that three clusters capture the most prominent division in the data, splitting into two clusters loses cohesion, while four or five clusters start to over fragment the main groups. Beyond k=8, the silhouette steadily rises again, peaking around k=15–16 (≈ 0.47 for k-means, ≈ 0.48 for k-medoids), which suggests a much finer partition yields the tightest, most well-separated clusters, but that many clusters may be over‐splitting. Therefore, based on average silhouette alone, two sensible choices emerge for both algorithms: a coarse segmentation at k=3 and a fine-grained segmentation at k=15 (or 16), depending on whether we want to prioritize broader overview or maximum cluster compactness.

b\)

```{r}
#Sensitivity for k-means at K = 3
set.seed(123)
K <- 3
n_runs <- 100

#k-means n_runs times with random init (nstart=1 each time)
wss_km <- replicate(n_runs, {
  km <- kmeans(df_scaled, centers = K, nstart = 1, iter.max = 100)
  km$tot.withinss
})

hist(wss_km, breaks = 20,
     main = "Histogram of total WSS over 100 k-means inits",
     xlab = "Total within-cluster SS")
#a density estimate
plot(density(wss_km),
     main = "Density of WSS over 100 k-means inits",
     xlab = "Total within-cluster SS")
abline(v = mean(wss_km), col = "blue", lwd = 2)
abline(v = median(wss_km), col = "red", lwd = 2)
legend("topright",
       legend = c("Mean", "Median"),
       col    = c("blue", "red"),
       lwd    = 2)

#Best two initializations
best_km <- order(wss_km)[1:2]
wss_km[best_km]


#Sensitivity for k-medoids (PAM) at K = 3
#to introduce randomness we use CLARA,which runs PAM on random subsamples:

set.seed(123)
sil_clara <- replicate(n_runs, {
  clara_res <- cluster::clara(df_scaled, k = K, samps = 5, pamLike = TRUE)
  mean(cluster::silhouette(clara_res$clustering, dist_matrix)[, "sil_width"])
})

#boxplot of avg. silhouette
boxplot(sil_clara,
        main = paste("CLARA (k-medoids) avg. silhouette over", n_runs, "samps (K=",K,")"),
        ylab = "Avg. silhouette")

# Histogram of silhouette values
hist(sil_clara, breaks = 20,
     main = "Histogram of avg. silhouette over 100 CLARA runs",
     xlab = "Avg. silhouette",
     ylab = "Frequency")

# Density plot
plot(density(sil_clara),
     main = "Density of avg. silhouette (CLARA)",
     xlab = "Avg. silhouette")
abline(v = mean(sil_clara), col = "blue", lwd = 2)
abline(v = median(sil_clara), col = "red",  lwd = 2)
legend("topright",
       legend = c("Mean", "Median"),
       col    = c("blue", "red"),
       lwd    = 2)

#Best two CLARA runs by silhouette
best_clara <- order(sil_clara, decreasing = TRUE)[1:2]
best_clara

```

For k=3, we ran k-means 100 times and plotted the histogram (and density) of the total within-cluster sum of squares (WSS) over those runs. As seen in the histogram, the WSS took largely to only 3 ranges of values. A small left‐hand bar at 3810, a tall middle bar around 3820 , and a short right‐hand bar \>4000.

Because most of the runs (more than half) fall in the two left bars , especially the tall middle one which is just slightly above the absolute minimum, the algorithm is extremely stable. This means that almost any random start lands in the optimal or near-optimal bin. The two optimal configurations are the runs that achieved the absolute minimum WSS of 3801.603.

EXPLAIN CLARA

c\)

```{r}
# Number of random inits
n_runs <- 500    
K      <- 3

# Prepare cluster
ncores <- detectCores() - 1
cl     <- makeCluster(ncores)

# Export data and packages to each worker
clusterExport(cl, c("df_scaled", "K"))
clusterEvalQ(cl, { library(cluster) })

#Parallel k-means WSS over n_runs
wss_vals <- parSapply(cl, 1:n_runs, function(i) {
  # one single-start kmeans
  km <- kmeans(df_scaled, centers = K, nstart = 1, iter.max = 100)
  km$tot.withinss
})

#Parallel CLARA silhouette over n_runs
sil_vals <- parSapply(cl, 1:n_runs, function(i) {
  clara_res <- clara(df_scaled, k = K, samps = 5, pamLike = TRUE)
  mean(silhouette(clara_res$clustering,
                  dist(df_scaled, method = "euclidean"))[, "sil_width"])
})

stopCluster(cl) 

# Quick summaries
summary(wss_vals)
sd(wss_vals)

summary(sil_vals)
sd(sil_vals)
```

d\)

```{r}
#Gap statistic for k-means on the scaled data
set.seed(123)
gap_km <- clusGap(
  df_scaled,
  FUN       = kmeans,
  K.max     = 10,    # test K = 1..10
  B         = 50,    # 50 bootstrap samples
  verbose   = FALSE
)

#Plot the Gap statistic
plot(
  gap_km,
  main = "Gap Statistic vs. K (k-means)",
  xlab = "Number of clusters K",
  ylab = "Gap statistic"
)

#Extract suggested K
print(gap_km, method = "firstmax")
```
