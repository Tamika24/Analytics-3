one_mat_c <- matrix(1, nrow(P))
c <- as.vector(t(P) %*% one_mat_c)
Dc <- diag(c)
Dc.sqrt <- sqrt(Dc)
col_prof <- solve(Dc) %*% t(P)
kableExtra::kable(row_prof, digits = 3, caption = "Table displaying row profiles")
kableExtra::kable(col_prof, digits = 3, caption = "Table displaying column profiles")
#| echo: false
library(ggplot2)
library(reshape2)
column_means <- colMeans(ratings)
total <- sum(ratings)
col_masses <-  column_means / total
chi_sq_dist <- function(row_prof_mat, col_masses) {
n <- ncol(row_prof_mat)
dist <- matrix(0, n, n)
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
d <- sum(((row_prof_mat[, i] - row_prof_mat[, j])^2) / col_masses[i])
dist[i, j] <- d
dist[j, i] <- d
}
}
return(dist)
}
kableExtra::kable(chi_sq_dist(row_prof, col_masses), digits = 3, caption = "Chi Squared distance between row and column profiles")
dist_matrix <- chi_sq_dist(row_prof, col_masses)
rownames(dist_matrix) <- paste("Row", 1:4)
colnames(dist_matrix) <- paste("Col", 1:4)
dist_melted <- melt(dist_matrix)
colnames(dist_melted) <- c("Row", "Column", "Distance")
dist_melted$Label <- round(dist_melted$Distance, 2)
ggplot(dist_melted, aes(x = Column, y = Row, fill = Distance)) +
geom_tile(color = "white", linewidth = 0.5) +
geom_text(aes(label = Label), color = "black", size = 4) +
scale_fill_gradientn(
colors = hcl.colors(50, "YlOrRd", rev = TRUE),
name = "Chi-Squared Distance"
) +
labs(
title = "Chi-Squared Distance Heatmap",
x = "Column Profile",
y = "Row Profile"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
)
#| echo: false
# We need to decompose S in order to attain U and Delta and V
S <- solve(Dr.sqrt) %*% (P- r %*% t(c)) %*% solve(Dc.sqrt)
# Getting the eigen vecs and singular values
svd_s <- svd(S)
# Principal row
big_f <- solve(Dr.sqrt) %*% svd_s$u %*% diag(svd_s$d)
# principal column
big_g <-  solve(Dc.sqrt) %*% svd_s$v %*% diag(svd_s$d)
#biplot(big_f[, 1:2], big_g[, 1:2],
#      xlab = "Dimension 1",
#     ylab = "Dimension 2",
#    main = "Correspondence Analysis Biplot",
#   cex = 0.5,
#  col = c("blue", "red"))
c.names <- colnames(ratings)
r.names <- row.names(ratings)
row_coords <- as.data.frame(big_f[, 1:2])
col_coords <- as.data.frame(big_g[, 1:2])
row_coords$Label <- r.names
col_coords$Label <- c.names
# the biplot version looked ugly so i did it with ggplot instead
ggplot() +
geom_point(
data = row_coords,
aes(x = V1, y = V2),
color = "blue",
size = 3
) +
geom_text(
data = row_coords,
aes(x = V1, y = V2, label = Label),
color = "blue",
vjust = -1
) +
geom_segment(
data = col_coords,
aes(x = 0, y = 0, xend = V1, yend = V2),
arrow = arrow(length = unit(0.2, "cm")),
color = "red",
linewidth = 0.7
) +
geom_point(
data = col_coords,
aes(x = V1, y = V2),
color = "red",
size = 3,
shape = 17
) +
geom_text(
data = col_coords,
aes(x = V1, y = V2, label = Label),
color = "red",
vjust = -1
) +
geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
labs(
title = "Correspondence Analysis Biplot between education level and movie genre preference",
x = paste("Dimension 1 (", round(svd_s$d[1]^2 / sum(svd_s$d^2) * 100, 1), "%)"),
y = paste("Dimension 2 (", round(svd_s$d[2]^2 / sum(svd_s$d^2) * 100, 1), "%)")
) +
theme_minimal() +
coord_cartesian(
xlim = c(min(row_coords$V1, col_coords$V1) * 1.1,
max(row_coords$V1, col_coords$V1) * 1.1),
ylim = c(min(row_coords$V2, col_coords$V2) * 1.1,
max(row_coords$V2, col_coords$V2) * 1.1)
)
#| echo: false
library(ca)
ca_results <- ca(P)
principal_inertias <- ca_results$sv^2
inertia_percent <- round(100 * principal_inertias / sum(principal_inertias), 1)
inertia_df <- data.frame(
Dimension = paste0("Dim ", seq_along(inertia_percent)),
Inertia = principal_inertias,
Percent = paste0(inertia_percent, "%")
)
kableExtra::kable(inertia_df, align = "c", caption = "Inertia explained by each dimension")
#| echo: false
# PCA version
cor_mat <- cor(ratings)
PCA_version <- eigen(cor_mat)
pc1 <- round(PCA_version$values[1]/sum(PCA_version$values), 3)
pc2 <- round(PCA_version$values[2]/sum(PCA_version$values), 3)
pca_result <- prcomp(ratings, scale = T)
biplot(pca_result,
choices = c(1, 2),
scale = 0,
cex = c(0.5, 0.8),
col = c("gray", "red"),
main = "Biplot for the first two Principal Components",
xlab = paste("PC1", "(",pc1,"% of variation)"),
ylab = paste("PC2", "(",pc2,"% of variation)"))
# need to plot using row principal in order to allow the distances between rows (education levels) to acutally have meaning
#library(ca)
#plot(ca(ratings), map = "symmetric", col = c("green", "brown"))
plot(ca(ratings), mass = TRUE, contrib = "absolute", map = "rowprincipal", arrows = c(T, T))
plot(F[,1], F[,2], type = "n",
xlab = xlab, ylab = ylab,
main = "CA Plot: Emphasizing Education Levels")
points(F[,1], F[,2], pch = 19, col = "blue")
text(F[,1], F[,2], labels = rownames(ratings), col = "blue", pos = 3)
# Add arrows from origin to columns (standard coords)
arrows(0, 0, G_std[,1], G_std[,2], col = "red", length = 0.1)
text(G_std[,1], G_std[,2], labels = colnames(ratings), col = "red", pos = 4)
abline(h = 0, v = 0, col = "gray", lty = 2)
plot(F[,1], F[,2], type = "n",
xlab = xlab, ylab = ylab,
main = "CA Plot: Emphasizing Education Levels")
points(F[,1], F[,2], pch = 19, col = "blue")
text(F[,1], F[,2], labels = rownames(ratings), col = "blue", pos = 3)
# Add arrows from origin to columns (standard coords)
arrows(0, 0, G_std[,1], G_std[,2], col = "red", length = 0.1)
text(G_std[,1], G_std[,2], labels = colnames(ratings), col = "red", pos = 4)
abline(h = 0, v = 0, col = "gray", lty = 2)
data(HairEyeColor)
HairEyeColor
# Convert the 3D contingency table to flat data frame with counts
hair_eye_df <- as.data.frame(HairEyeColor)
# Expand counts to individual observations (unroll frequencies)
hair_eye_indiv <- hair_eye_df[rep(1:nrow(hair_eye_df), hair_eye_df$Freq), 1:3]
hair_eye_indiv
# Result is a case-by-variable data frame suitable for MCA
head(hair_eye_indiv)
# Expand counts to individual observations (unroll frequencies)
hair_eye_indiv <- hair_eye_df[rep(1:nrow(hair_eye_df), hair_eye_df$Freq), 1:3]
nrow(hair_eye_df)
hair_eye_df$Freq)
hair_eye_df$Freq
# Expand counts to individual observations (unroll frequencies)
hair_eye_indiv <- hair_eye_df[rep(1:nrow(hair_eye_df), hair_eye_df$Freq), 1:3]
hair_eye_indiv
library(ca)
data(HairEyeColor)
# Step 1: Convert to individual-level data
df <- as.data.frame(HairEyeColor)
hair_eye_indiv <- df[rep(1:nrow(df), df$Freq), 1:3]
# Step 2: Perform MCA with proper labelling
mca_fit <- mjca(hair_eye_indiv, lambda = "adjusted", abbrev = FALSE)
# Step 3: Fix category names to include variable names
# This renames the levels to e.g. "Hair:Brown", "Eye:Blue"
levels <- unlist(lapply(names(hair_eye_indiv), function(var) {
paste(var, ":", levels(hair_eye_indiv[[var]]), sep = "")
}))
# Step 4: Plot with custom labels
plot(mca_fit, labels = list(names = levels), main = "MCA: Hair, Eye, and Sex")
# Load data and convert to individual-level format
library(ca)
data(HairEyeColor)
df <- as.data.frame(HairEyeColor)
hair_eye_indiv <- df[rep(1:nrow(df), df$Freq), 1:3]
# Perform MCA (fix label issue using abbrev = FALSE)
mca_fit <- mjca(hair_eye_indiv, lambda = "adjusted", abbrev = FALSE)
# Plot MCA with readable labels (automatically fixed)
plot(mca_fit, main = "MCA: Hair, Eye, and Sex (Proper Labels)")
library(ca)
data(HairEyeColor)
df <- as.data.frame(HairEyeColor)
hair_eye_indiv <- df[rep(1:nrow(df), df$Freq), 1:3]
# Perform MCA (fix label issue using abbrev = FALSE)
mca_fit <- mjca(hair_eye_indiv, lambda = "adjusted", abbrev = FALSE)
# Plot MCA with readable labels (automatically fixed)
plot(mca_fit, main = "MCA: Hair, Eye, and Sex (Proper Labels)")
# Load the HairEyeColor dataset
data("HairEyeColor")
# Convert to data frame and expand frequency counts
df <- as.data.frame(HairEyeColor)
# Repeat each row based on frequency (unroll into individuals)
hair_eye_indiv <- df[rep(1:nrow(df), df$Freq), 1:3]
# View head of the transformed data
head(hair_eye_indiv)
#| message: false
#| warning: false
# We need to convert the three dimensional data into a burt matrix
library(tidyr)
library(caret)
flat_data <- as.data.frame(HairEyeColor)
#head(flat_data)
expanded_data <- flat_data[rep(1:nrow(flat_data), flat_data$Freq), -4]
#head(expanded_data)
# I had to use the caret library otherwise i lost
# one of the columns when making dummy and reference variables
dummy_model <- dummyVars(~ Hair + Eye + Sex, data = expanded_data, fullRank = FALSE)
indicator_matrix <- predict(dummy_model, expanded_data)
colnames(indicator_matrix) <- gsub("Hair|Eye|Sex", "", colnames(indicator_matrix))
# head(indicator_matrix)
burt_matrix <- t(indicator_matrix) %*% indicator_matrix
burt_matrix
data(HairEyeColor)
# Convert the 3D contingency table to flat data frame with counts
hair_eye_df <- as.data.frame(HairEyeColor)
# Expand counts to individual observations (unroll frequencies)
hair_eye_indiv <- hair_eye_df[rep(1:nrow(hair_eye_df), hair_eye_df$Freq), 1:3]
# Result is a case-by-variable data frame suitable for MCA
head(hair_eye_indiv)
hair_eye_indiv
#|echo: false
# Perform MCA with lambda-adjusted method (default in mjca)
mca_fit <- mjca(hair_eye_indiv, lambda = "adjusted")
# Summary of MCA output
summary(mca_fit)
# Plot results
plot(mca_fit, main = "MCA: Hair, Eye, and Sex")
plot(mca_fit, main = "MCA: Hair, Eye, and Sex")
plot(mca_fit, main = "MCA: Hair, Eye, and Sex")
mca <-mjca(burt_matrix, nd = 3, lambda = "adjusted")
#summary(mca)
plot(mca, mass = TRUE, contrib = "absolute", arrows = c(T,T), map = "rowprincipal", cex = 1.5, cex.axis = 1.3, cex.lab = 1.3)
#| echo: false
ratings <- structure(
c(
50, 30, 10, 1, 60, 80, 40, 2,
40, 60, 20, 1, 10, 30, 50, 4),
dim = c(4L, 4L),
dimnames = list(
c("High School", "Bachelor's", "Master's", "Doctorate"),
c("Action", "Drama", "Comedy", "Documentary"))
)
#| echo: false
P <- ratings / sum(ratings)
# Row profiles
one_mat_r <- matrix(1, ncol(P))
r <- as.vector(P %*% one_mat_r)
Dr <- diag(r)
Dr.sqrt <- sqrt(Dr)
row_prof <- solve(Dr) %*% P
# Column profiles
one_mat_c <- matrix(1, nrow(P))
c <- as.vector(t(P) %*% one_mat_c)
Dc <- diag(c)
Dc.sqrt <- sqrt(Dc)
col_prof <- solve(Dc) %*% t(P)
kableExtra::kable(row_prof, digits = 3, caption = "Table displaying row profiles")
kableExtra::kable(col_prof, digits = 3, caption = "Table displaying column profiles")
#| echo: false
library(ggplot2)
library(reshape2)
column_means <- colMeans(ratings)
total <- sum(ratings)
col_masses <-  column_means / total
chi_sq_dist <- function(row_prof_mat, col_masses) {
n <- ncol(row_prof_mat)
dist <- matrix(0, n, n)
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
d <- sum(((row_prof_mat[, i] - row_prof_mat[, j])^2) / col_masses[i])
dist[i, j] <- d
dist[j, i] <- d
}
}
return(dist)
}
kableExtra::kable(chi_sq_dist(row_prof, col_masses), digits = 3, caption = "Chi Squared distance between row and column profiles")
dist_matrix <- chi_sq_dist(row_prof, col_masses)
rownames(dist_matrix) <- paste("Row", 1:4)
colnames(dist_matrix) <- paste("Col", 1:4)
dist_melted <- melt(dist_matrix)
colnames(dist_melted) <- c("Row", "Column", "Distance")
dist_melted$Label <- round(dist_melted$Distance, 2)
ggplot(dist_melted, aes(x = Column, y = Row, fill = Distance)) +
geom_tile(color = "white", linewidth = 0.5) +
geom_text(aes(label = Label), color = "black", size = 4) +
scale_fill_gradientn(
colors = hcl.colors(50, "YlOrRd", rev = TRUE),
name = "Chi-Squared Distance"
) +
labs(
title = "Chi-Squared Distance Heatmap",
x = "Column Profile",
y = "Row Profile"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
)
#| echo: false
# We need to decompose S in order to attain U and Delta and V
S <- solve(Dr.sqrt) %*% (P- r %*% t(c)) %*% solve(Dc.sqrt)
# Getting the eigen vecs and singular values
svd_s <- svd(S)
# Principal row
big_f <- solve(Dr.sqrt) %*% svd_s$u %*% diag(svd_s$d)
# principal column
big_g <-  solve(Dc.sqrt) %*% svd_s$v %*% diag(svd_s$d)
#biplot(big_f[, 1:2], big_g[, 1:2],
#      xlab = "Dimension 1",
#     ylab = "Dimension 2",
#    main = "Correspondence Analysis Biplot",
#   cex = 0.5,
#  col = c("blue", "red"))
c.names <- colnames(ratings)
r.names <- row.names(ratings)
row_coords <- as.data.frame(big_f[, 1:2])
col_coords <- as.data.frame(big_g[, 1:2])
row_coords$Label <- r.names
col_coords$Label <- c.names
# the biplot version looked ugly so i did it with ggplot instead
ggplot() +
geom_point(
data = row_coords,
aes(x = V1, y = V2),
color = "blue",
size = 3
) +
geom_text(
data = row_coords,
aes(x = V1, y = V2, label = Label),
color = "blue",
vjust = -1
) +
geom_segment(
data = col_coords,
aes(x = 0, y = 0, xend = V1, yend = V2),
arrow = arrow(length = unit(0.2, "cm")),
color = "red",
linewidth = 0.7
) +
geom_point(
data = col_coords,
aes(x = V1, y = V2),
color = "red",
size = 3,
shape = 17
) +
geom_text(
data = col_coords,
aes(x = V1, y = V2, label = Label),
color = "red",
vjust = -1
) +
geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
labs(
title = "Correspondence Analysis Biplot between education level and movie genre preference",
x = paste("Dimension 1 (", round(svd_s$d[1]^2 / sum(svd_s$d^2) * 100, 1), "%)"),
y = paste("Dimension 2 (", round(svd_s$d[2]^2 / sum(svd_s$d^2) * 100, 1), "%)")
) +
theme_minimal() +
coord_cartesian(
xlim = c(min(row_coords$V1, col_coords$V1) * 1.1,
max(row_coords$V1, col_coords$V1) * 1.1),
ylim = c(min(row_coords$V2, col_coords$V2) * 1.1,
max(row_coords$V2, col_coords$V2) * 1.1)
)
#| echo: false
library(ca)
ca_results <- ca(P)
principal_inertias <- ca_results$sv^2
inertia_percent <- round(100 * principal_inertias / sum(principal_inertias), 1)
inertia_df <- data.frame(
Dimension = paste0("Dim ", seq_along(inertia_percent)),
Inertia = principal_inertias,
Percent = paste0(inertia_percent, "%")
)
kableExtra::kable(inertia_df, align = "c", caption = "Inertia explained by each dimension")
#| echo: false
# PCA version
cor_mat <- cor(ratings)
PCA_version <- eigen(cor_mat)
pc1 <- round(PCA_version$values[1]/sum(PCA_version$values), 3)
pc2 <- round(PCA_version$values[2]/sum(PCA_version$values), 3)
pca_result <- prcomp(ratings, scale = T)
biplot(pca_result,
choices = c(1, 2),
scale = 0,
cex = c(0.5, 0.8),
col = c("gray", "red"),
main = "Biplot for the first two Principal Components",
xlab = paste("PC1", "(",pc1,"% of variation)"),
ylab = paste("PC2", "(",pc2,"% of variation)"))
# need to plot using row principal in order to allow the distances between rows (education levels) to acutally have meaning
#library(ca)
#plot(ca(ratings), map = "symmetric", col = c("green", "brown"))
plot(ca(ratings), mass = TRUE, contrib = "absolute", map = "rowprincipal", arrows = c(T, T))
#| message: false
#| warning: false
# We need to convert the three dimensional data into a burt matrix
library(tidyr)
library(caret)
flat_data <- as.data.frame(HairEyeColor)
#head(flat_data)
expanded_data <- flat_data[rep(1:nrow(flat_data), flat_data$Freq), -4]
#head(expanded_data)
# I had to use the caret library otherwise i lost
# one of the columns when making dummy and reference variables
dummy_model <- dummyVars(~ Hair + Eye + Sex, data = expanded_data, fullRank = FALSE)
indicator_matrix <- predict(dummy_model, expanded_data)
colnames(indicator_matrix) <- gsub("Hair|Eye|Sex", "", colnames(indicator_matrix))
# head(indicator_matrix)
burt_matrix <- t(indicator_matrix) %*% indicator_matrix
burt_matrix
mca <-mjca(burt_matrix, nd = 3, lambda = "adjusted")
#summary(mca)
plot(mca, mass = TRUE, contrib = "absolute", arrows = c(T,T), map = "rowprincipal", cex = 1.5, cex.axis = 1.3, cex.lab = 1.3)
plot(mca, mass = TRUE, contrib = "absolute", arrows = c(T,T), map = "rowprincipal", cex = 1.5, cex.axis = 1.3, cex.lab = 1.3)
plot(mca_fit, main = "MCA: Hair, Eye, and Sex")
plot(mca_fit, main = "MCA: Hair, Eye, and Sex")
plot(mca_fit, main = "MCA: Hair, Eye, and Sex")
plot(mca_fit, main = "MCA: Hair, Eye, and Sex")
library(expm)
w1 <- matrix(c(
0,1,0,0,0,1,0,0,0,
1,0,1,0,1,0,0,0,0,
0,1,0,1,0,0,0,0,0,
0,0,1,0,1,0,0,0,1,
0,1,0,1,0,1,0,1,0,
1,0,0,0,1,0,1,0,0,
0,0,0,0,0,1,0,1,0,
0,0,0,0,1,0,1,0,1,
0,0,0,1,0,0,0,1,0
), byrow = TRUE, nrow = 9)
w1
w8 <- w1 %^% 8
### Q1 h)
library(expm)
### Q1 h)
install.packages(expm)
library(expm)
### Q1 h)
install.packages("expm")
library(expm)
library(expm)
w8 <- w1 %^% 8
w8
w8[7,1]
setwd("~/Documents/GitHub/Analytics-3")
#| include: false
library(cluster)
library(NbClust)
install.packages("NbClust")
library(NbClust)
library(fpc)
install.packages("fpc")
library(fpc)
library(knitr)
df <- read.table("STA4026_Assignment_Clustering.txt",
header = FALSE)
View(df)
anyNA(df)
#check for missing values
anyNA(df)
View(df)
#| echo: false
df <- read.table("STA4026_Assignment_Clustering.txt",
header = FALSE)
#check for missing values
anyNA(df)
#dimension of dataset
dim <- dim(df)
kable(dim, col.names = "Dimensions", caption = "The dimensions of the data set")
#data types
kable(str(df), caption= "The structure of the data set")
#missing values
kable(colSums(is.na(df)), caption ="The number of missing values in each column")
#quartiles of dataset
kable(summary(df), caption="A summary of the data statistics")
#duplicate rows
dup_rows <- duplicated(df)
sum(dup_rows)
?anyNA
